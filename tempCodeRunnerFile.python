class FoodItem:
    def __init__(self, name, price):
        self.name = name
        self.price = price

class Menu:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def display_menu(self):
        print("Menu:")
        for index, item in enumerate(self.items, start=1):
            print(f"{index}. {item.name} - Rs.{item.price:.2f}")

class Order:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)

    def calculate_total(self):
        return sum(item.price for item in self.items)

def main():
 
    paneer = FoodItem("Khadai panner", 220)
    pizza = FoodItem("Pizza", 129)
    naan = FoodItem("Garlic naan", 70)
    veg=FoodItem("Mix veg",180)

    menu = Menu()
    menu.add_item(paneer)
    menu.add_item(pizza)
    menu.add_item(naan)
    menu.add_item(veg)

    print("\n\n\n")
    print("********   WELCOME TO ONLINE FOOD ORDERING SYSTEM    *************")
    print("\n\n\n")

    menu.display_menu()

    
    order = Order()

   
    while True:
        try:
            choice = int(input("Enter the item number to add to your order (0 if you are done ): "))
            if choice == 0:
                break
            elif 1 <= choice <= len(menu.items):
                order.add_item(menu.items[choice - 1])
                print(f"{menu.items[choice - 1].name} added to your order.")
            else:
                print("Invalid choice. Please enter a valid item number.")
        except ValueError:
            print("Invalid input. Please enter a number.")

   
    print("\nYour Order:")
    for item in order.items:
        print(f"- {item.name} - Rs.{item.price:.2f}")

    total = order.calculate_total()
    print(f"Total: Rs.{total:.2f}")

main()
